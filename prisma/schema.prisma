datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  email      String   @db.VarChar(100) @unique
  phone      String   @db.VarChar(20) @unique
  address    String   @db.VarChar(150)
  password   String   @db.VarChar(255)
  profileType String  @db.VarChar(20)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)
  deletedAt  DateTime?
  notifications Notification[]
  client     Client?
  supplier   Supplier?
  motoboy    Motoboy?
  transactions TransactionLog[]
  activities ActivityLog[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   @db.VarChar(50)
  message   String   @db.VarChar(100)
  sentAt    DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Client {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  cnpj        String   @db.VarChar(20)
  stateReg    String?  @db.VarChar(100)
  fantasyName String   @db.VarChar(100)
  sector      String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  deliveries  Delivery[]
}

model Supplier {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  fantasyName String   @db.VarChar(100)
  cnpj        String   @db.VarChar(20)
  operation   String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  deliveries  Delivery[]
}

model Motoboy {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  name            String    @db.VarChar(100)
  cpf             String    @db.VarChar(14)
  cnh             String    @db.VarChar(20)
  gender          String    @db.VarChar(100)
  emergencyContact String   @db.VarChar(50)
  status          String    @db.VarChar(100)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deliveries      Delivery[]
  vehicles        Vehicle[]  
  user            User      @relation(fields: [userId], references: [id])
}

model Vehicle {
  id        Int      @id @default(autoincrement())
  model     String   @db.VarChar(50)
  color     String   @db.VarChar(20)
  type      String   @db.VarChar(20)
  renavam   String   @db.VarChar(20)
  year      Int
  plate     String   @db.VarChar(7) @unique
  motoboyId Int?
  motoboy   Motoboy? @relation(fields: [motoboyId], references: [id])
}

model Delivery {
  id        Int      @id @default(autoincrement())
  clientId  Int
  supplierId Int
  motoboyId Int?
  status    DeliveryStatus @default(PENDING)
  pickup    String   @db.VarChar(200)
  destination String @db.VarChar(200)
  recipient String   @db.VarChar(100)
  notes     String?
  requestedAt DateTime @default(now())
  serviceType String   @db.VarChar(50)
  paymentId Int? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client  @relation(fields: [clientId], references: [id])
  supplier  Supplier @relation(fields: [supplierId], references: [id])
  motoboy   Motoboy? @relation(fields: [motoboyId], references: [id])
  payment   Payment? @relation(fields: [paymentId], references: [id])
}

model Payment {
  id       Int      @id @default(autoincrement())
  amount   Float
  method   String   @db.VarChar(50)
  paymentDate DateTime?
  status   PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  delivery Delivery?
}

model TransactionLog {
  id       Int      @id @default(autoincrement())
  action   String   @db.VarChar(100)
  userId   Int
  timestamp DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  description String @db.VarChar(200)
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}
